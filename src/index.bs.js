// Generated by BUCKLESCRIPT VERSION 2.1.1, PLEASE EDIT WITH CARE
'use strict';

var Pervasives             = require("bs-platform/lib/js/pervasives.js");
var Reprocessing           = require("Reprocessing/src/Reprocessing.js");
var Reprocessing_Env       = require("Reprocessing/src/Reprocessing_Env.js");
var Reprocessing_Draw      = require("Reprocessing/src/Reprocessing_Draw.js");
var Reprocessing_Constants = require("Reprocessing/src/Reprocessing_Constants.js");

var initialState = /* float array */[
  0.0,
  0.0,
  0.0
];

function setup(env) {
  Reprocessing_Env.size(600, 600, env);
  return initialState;
}

function move(state, timeStep) {
  return /* float array */[
          state[/* x */0],
          Pervasives.max(0.0, state[/* y */1] + state[/* vy */2] * timeStep),
          Pervasives.max(0.0, state[/* vy */2] + -10 * timeStep)
        ];
}

function reduce(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* float array */[
              state[/* x */0],
              state[/* y */1],
              3.0
            ];
    } else {
      return state;
    }
  } else {
    return move(state, action[0]);
  }
}

function draw(state, env) {
  var timeStep = Reprocessing_Env.deltaTime(env);
  Reprocessing_Draw.background(Reprocessing_Constants.black, env);
  Reprocessing_Draw.fill(Reprocessing_Constants.red, env);
  var x = 150.0 + state[/* x */0];
  var y = -500.0 + state[/* y */1];
  Reprocessing_Draw.rect(/* tuple */[
        x | 0,
        -(y | 0) | 0
      ], 100, 100, env);
  return reduce(state, /* Tick */[timeStep]);
}

function keyPressed(state, env) {
  var match = Reprocessing_Env.keyCode(env);
  if (match !== 4) {
    return state;
  } else {
    return reduce(state, /* Jump */1);
  }
}

Reprocessing.run(setup, /* Some */[draw], /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[keyPressed], /* None */0, /* None */0, /* () */0);

var g = -10;

var jumpSpeed = 3.0;

exports.g            = g;
exports.jumpSpeed    = jumpSpeed;
exports.initialState = initialState;
exports.setup        = setup;
exports.move         = move;
exports.reduce       = reduce;
exports.draw         = draw;
exports.keyPressed   = keyPressed;
/*  Not a pure module */
